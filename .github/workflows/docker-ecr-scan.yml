name: Build, Scan, and Deploy Docker Image to ECR

on:
  push:
    branches: [main]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::334645279807:role/terraform
          aws-region: ap-south-1

      - name: Build Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .

      - name: Scan image with Trivy (before push)
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and Push image to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Get ArgoCD credentials from AWS Secrets Manager
        id: get_argocd_secrets
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id argocd/credentials --region ap-south-1 --query SecretString --output text)
          echo "ARGOCD_SERVER=$(echo $SECRET_JSON | jq -r .ARGOCD_SERVER)" >> $GITHUB_ENV
          echo "ARGOCD_USERNAME=$(echo $SECRET_JSON | jq -r .ARGOCD_USERNAME)" >> $GITHUB_ENV
          echo "ARGOCD_PASSWORD=$(echo $SECRET_JSON | jq -r .ARGOCD_PASSWORD)" >> $GITHUB_ENV
          echo "ARGOCD_APP_NAME=$(echo $SECRET_JSON | jq -r .ARGOCD_APP_NAME)" >> $GITHUB_ENV
        env:
          AWS_REGION: ap-south-1

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER \
            --username $ARGOCD_USERNAME \
            --password $ARGOCD_PASSWORD \
            --insecure

      - name: Deploy to EKS via ArgoCD
        run: |
          IMAGE_TAG=${{ github.sha }}
          FULL_IMAGE_REF="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"
          argocd app set $ARGOCD_APP_NAME --image $FULL_IMAGE_REF --insecure
          argocd app sync $ARGOCD_APP_NAME --insecure --timeout 300
          argocd app wait $ARGOCD_APP_NAME --insecure --timeout 600 --health

      - name: Verify deployment
        run: |
          echo "âœ… Deployment completed successfully!"
          echo "Image deployed: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
          echo "ArgoCD App: $ARGOCD_APP_NAME" 